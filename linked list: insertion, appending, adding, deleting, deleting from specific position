#include <iostream>

using namespace std;

class Node
{
public:
	int data;
	Node * next;
};
	

void print_list(Node * n){
	while(n!=NULL){
		cout<<n->data<<endl;
		n=n->next;
	}
}

void push( Node** head_ref ,int data){
	Node * new_node= new Node();
	new_node->data=data;
	new_node->next=*head_ref;
	*head_ref=new_node;
}


void insert_after(Node * prev_node, int data){
	if(prev_node==NULL){
		cout<<"Previous node cannot be NULL"<<endl;
		return;
	}
	Node * new_node = new Node();
	new_node->data=data;
	new_node->next=prev_node->next;
	prev_node->next=new_node;
}

void append(Node ** head_ref, int data){
	Node * last= *head_ref;
	Node * new_node = new Node();
	new_node->data = data;
	new_node->next=NULL;
	if(*head_ref==NULL){
		*head_ref=new_node;
		return;
	}
	while(last->next!=NULL){
		last=last->next;
	}

	last->next=new_node;
	return;

}

void delete_node(Node ** head_ref, int key){
	Node * temp = *head_ref, * prev;
	if(temp!=NULL && temp->data==key){
		*head_ref=temp->next;
		free(temp);
		return;
	}
	while(temp!=NULL && temp->data!=key){
		prev=temp;
		temp=temp->next;
	}
	if(temp==NULL){
		return;
	}
	prev->next=temp->next;
	free(temp);
}

void delete_node_with_position(Node ** head_ref,int position){
	if(*head_ref==NULL){
		return;
	}
	Node* temp = *head_ref; 
	if(position==0){
		*head_ref=temp->next;
	}

     for (int i=0; temp!=NULL && i<position-1; i++) 
         temp = temp->next; 

     if (temp == NULL || temp->next == NULL) 
          return; 
      Node *next = temp->next->next;
      free(temp->next);  
      temp->next = next;
}

int main(){
	Node * head=NULL;

    push(&head,0);
    append(&head,1);
    append(&head,2);
    push(&head,-1);
    insert_after(head->next,1);
   // print_list(head);
    delete_node(&head,-1);
    delete_node_with_position(&head,2);
    print_list(head);

	return 0;
}
