#include <limits.h> 
#include <stdio.h> 
#include <stdlib.h>

typedef struct{
    int front,rear,size;
    unsigned capacity;
    int * array;
}Queue;

Queue * createQueue(unsigned capacity){
    Queue * queue = (Queue *) malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity-1;
    queue->array = (int *) malloc(sizeof(int)*queue->capacity);
    return queue;
}

int isFull(Queue * queue){
    return (queue->size==queue->capacity);
}

int isEmpty(Queue * queue){
    return (queue->size==0);
}

void Enqueue(Queue * queue, int item){
    if(isFull(queue)){
        printf("Queue is full!!\n");
        return;
    }
    queue->rear = (queue->rear+1)%queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size+1;
    printf("Item %d pushed on queue\n",item);
}

int Dequeue(Queue * queue){
    if(isEmpty(queue)){
        printf("Queue is empty!!\n");
        return INT_MIN;
    }
    int item = queue->array[queue->front];
    queue->front = (queue->front+1)%queue->capacity;
    queue->size = queue->size-1;
    return item;
}

int front(Queue * queue){
    if(isEmpty(queue)){
        printf("Queue is empty!!\n");
        return INT_MIN;
    }
    return queue->array[queue->front];
}

int rear(Queue * queue){
    if(isEmpty(queue)){
        printf("Queue is empty!!\n");
        return INT_MIN;
    }
    
    return queue->array[queue->rear];
}


int main()
{
    Queue * queue = createQueue(10);
    
    Enqueue(queue,1);
    Enqueue(queue,2);
    Enqueue(queue,3);
    int rearElement=rear(queue);
    int frontElement=front(queue);
    printf("Rear=%d, Front=%d\n",rearElement,frontElement);
    
    Dequeue(queue);
    rearElement=rear(queue);
    frontElement=front(queue);
    printf("Rear=%d, Front=%d\n",rearElement,frontElement);
    
    return 0;
}
